{"version":3,"sources":["logo.svg","notions/components.js","lookup/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NotionsComponent","props","textAreaRef","React","createRef","useState","newNotions","setNewNotions","className","onSubmit","event","preventDefault","newVal","current","value","tempNewNotions","unshift","content","likes","id","ref","required","placeholder","name","type","NotionsList","notionsInit","setNotionsInit","notions","setNotions","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","console","log","message","send","loadNotions","map","item","index","Notion","notion","key","ActionBtn","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","appEl","document","getElementById","ReactDOM","render","notionsEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.18ce5dff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useState } from \"react\";\n\nimport { loadNotions } from \"../lookup\";\n//import { NotionsList } from \".\";\n\nexport function NotionsComponent(props) {\n  const textAreaRef = React.createRef();\n  const [newNotions, setNewNotions] = useState([]);\n  const handleSubmit = event => {\n    event.preventDefault();\n    const newVal = textAreaRef.current.value;\n    let tempNewNotions = [...newNotions];\n    tempNewNotions.unshift({\n      content: newVal,\n      likes: 0,\n      id: 1234\n    });\n    setNewNotions(tempNewNotions);\n    textAreaRef.current.value = \"\";\n  };\n  return (\n    <div className={props.className}>\n      <div className=\"col-12 mb-3\">\n        <form onSubmit={handleSubmit}>\n          <textarea\n            ref={textAreaRef}\n            required={true}\n            className=\"form-control\"\n            placeholder=\"Post a notion\"\n            name=\"notion\"\n          ></textarea>\n          <button type=\"submit\" className=\"btn btn-primary my-3\">\n            Notionize\n          </button>\n        </form>\n      </div>\n      <NotionsList newNotions={newNotions} />\n    </div>\n  );\n}\n\nexport function NotionsList(props) {\n  const [notionsInit, setNotionsInit] = useState([]);\n  const [notions, setNotions] = useState([]);\n  useEffect(() => {\n    const final = [...props.newNotions].concat(notionsInit);\n    if (final.length !== notions.length) {\n      setNotions(final);\n    }\n  }, [props.newNotions, notions, notionsInit]);\n\n  useEffect(() => {\n    const myCallback = (response, status) => {\n      if (status === 200) {\n        setNotionsInit(response);\n      } else {\n        console.log(\"There was an error\");\n      }\n    };\n    loadNotions(myCallback);\n  }, [notionsInit]);\n\n  return notions.map((item, index) => {\n    return (\n      <Notion\n        notion={item}\n        className=\"my-5 py-5 border bg-white text-dark\"\n        key={`${index}-{item.id}`}\n      />\n    );\n  });\n}\n\nexport function ActionBtn(props) {\n  const { notion, action } = props;\n  const [likes, setLikes] = useState(notion.likes ? notion.likes : 0);\n  const [userLike, setUserLike] = useState(\n    notion.userLike === true ? true : false\n  );\n  const className = props.className\n    ? props.className\n    : \"btn btn-primary btn-sm\";\n\n  const actionDisplay = action.display ? action.display : \"Action\";\n  const handleClick = event => {\n    event.preventDefault();\n    if (action.type === \"like\") {\n      if (userLike === true) {\n        setLikes(likes - 1);\n        setUserLike(false);\n      } else {\n        setLikes(notion.likes + 1);\n        setUserLike(true);\n      }\n    }\n  };\n  const display =\n    action.type === \"like\" ? `${likes} ${actionDisplay}` : actionDisplay;\n  return (\n    <button className={className} onClick={handleClick}>\n      {display}\n    </button>\n  );\n}\n\nexport function Notion(props) {\n  const { notion } = props;\n  const className = props.className\n    ? props.className\n    : \"col-10 mx-auto col-md-6\";\n  return (\n    <div className={className}>\n      <p>\n        {notion.id} - {notion.content}\n      </p>\n      <div className=\"btn btn-group\">\n        <ActionBtn\n          notion={notion}\n          action={{ type: \"like\", display: \"Likes\" }}\n        />\n        <ActionBtn\n          notion={notion}\n          action={{ type: \"unlike\", display: \"Unlike\" }}\n        />\n        <ActionBtn\n          notion={notion}\n          action={{ type: \"share\", display: \"Share\" }}\n        />\n      </div>\n    </div>\n  );\n}\n","export function loadNotions(callback) {\n  const xhr = new XMLHttpRequest();\n  const method = \"GET\";\n  const url = \"http://localhost:8000/api/notions/\";\n  const responseType = \"json\";\n  xhr.responseType = responseType;\n  xhr.open(method, url);\n  xhr.onload = function () {\n    callback(xhr.response, xhr.status);\n  };\n  xhr.onerror = function (e) {\n    console.log(e);\n    callback({ message: \"The request was an error\" }, 400);\n  };\n  xhr.send();\n}\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport { NotionsComponent } from \"./notions\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <NotionsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { NotionsComponent } from \"./notions\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst appEl = document.getElementById(\"root\");\nif (appEl) {\n  ReactDOM.render(<App />, appEl);\n}\nconst notionsEl = document.getElementById(\"notions-2\");\nif (notionsEl) {\n  ReactDOM.render(<NotionsComponent />, notionsEl);\n}\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}